#include <stdio.h>
void sparse(int a[20][20],int r,int c);
int s[10][10],t[10][10],s1[100][100],s2[100][100];
int add();
int transverse();


void main()
{
	int r=0,c=0,a[20][20],i,j,ch,con=0;
	printf(" -MATRIX 1-\n");
	printf(" Enter number of rows : \n");
	scanf("%d",&r);
	printf(" Enter number of columns: \n");
	scanf("%d",&c);
	
	printf("Enter elements of matrix a: ");
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			scanf("%d",&a[i][j]);
		}
	}
	
	printf("Matrix a:\n");
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			printf("%d\t",a[i][j]);
		}
		printf("\n"); // Move to the next line after printing a row
    	}	
	
	sparse(a,r,c); //convert matrix to sparse representation

	printf("-array recorded- \n");
	do
	{
		printf(" Do you want to \n(1)add\n(2)transverse \n ");
		printf(" Enter your choice: ");
		scanf("%d",&ch);
		if (ch==1)
		{
			//add(); /// a is array name
		}
		/*
		if (ch==2)
		{
			transverse(a,len);	
		}
		*/
	
		printf("\n Do you want to continue? (PRESS 1 TO CONTINUE) : \n");
		scanf("%d",&con);
	}while(con==1);
}

void sparse(int a[20][20],int r,int c)
{
	int b[20][20],i,j;
	int nonzero = 0; // Variable to count non-zero elements
	
	// Initialize the sparse matrix with dimensions and count
	b[0][0]=r; 
	b[0][1]=c;
	
	// Traverse the original matrix to fill sparse matrix `b`
    	int k = 1; // Start from 1 because b[0] contains dimensions
	
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			if(a[i][j]!=0) //identify non zero elements
			{
				b[k][0]=i;
				b[k][1]=j;
				b[k][2]=a[i][j];
				k++;
				nonzero++;  // Increment count of non-zero elements
			}
		}
	}
	b[0][2]=nonzero;	// Store the count of non-zero elements at the end of the sparse matrix
	
	
	// Print the sparse matrix
	printf("SPARSE a:\n");
	printf("Row  Column  Value\n");
       	printf("%d\t%d\t%d\n",r,c,nonzero);

   	//sparse
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			if (a[i][j] != 0) 
			{ 
               			printf("%d\t%d\t%d\n", i, j, a[i][j]);
            		}
		
		}
		printf("\n"); // Move to the next line after printing a row	
    	}
    	
}

/*
void add()
{
	int a[20][20],int b[20][20],r1,c1,r2,c2,int c[20][20],i=0,j=0,k=0;
	printf("-Enter first matrix-\n");
	printf(" Enter number of rows and columns: \n");
	scanf("%d%d",&r&c);
	printf("Enter elements of matrix a: ");
	for(i=0;i<r1;i++)
	{
		for(j=0;j<c1;j++)
		{
			scanf("%d%d",&a[i][j]);
		}
	}
	
	printf("-Enter second matrix-\n");
	printf(" Enter number of rows and columns: \n");
	scanf("%d%d",&r&c);
	printf("Enter elements of matrix a: ");
	for(i=0;i<r2;i++)
	{
		for(j=0;j<c2;j++)
		{
			scanf("%d%d",&b[i][j]);
		}
	}
	if((a[0][0]==b[0][0])&& (a[0][1]==b[0][1]))
	{
		while(i<r && j<c)
		{
			if((a[i][0]=b[j][0])&&(a[0][1]==b[0][1]))
			{ 
				c[k][0]=a[i][0];
				c[k][1]=a[i][1];
				c[k][2]=a[i][2]+b[j][2];
				i++;j++;k++;
			}
			
			else
			{
				printf(" matrix cannot be added ");
			}
			else if (a[i][0]==b[j][0])
			{
				if (a[i][1]<b[j][1])
				{
					c[k][0]=a[i][0];
					c[k][1]=a[i][1];
					c[k][2]=a[i][2];
					i++;
					k++;
				}
	
				else
				{
					c[k][0]=b[j][0];
					c[k][1]=b[j][1];
					c[k][2]=b[j][2];
					k++;
					j++;
				}
			}
			else
			{
				if(a[i][0]<b[j][0])
				{	
					c[k][0]=a[i][0];
					c[k][1]=a[i][1];
					c[k][2]=a[i][2];
					k++;
					i++;
				}
			}	
	
			while(i<r)
			{
				c[k][0]=a[i][0];
				c[k][1]=a[i][1];
				c[k][2]=a[i][2];
				i++;
				k++;
			}
			while(j<c)
			{
				c[k][0]=b[j][0];
				c[k][1]=b[j][1];
				c[k][2]=b[j][2];
			}
		
		}
		else
		{
			printf("ADDITION NOT POSSIBLE");
		}
	}
}
	*/
	









